version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: argenova_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - argenova_network
    restart: unless-stopped

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: argenova_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    networks:
      - argenova_network
    restart: unless-stopped

  # Flask API
  flask_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: argenova_flask_api
    ports:
      - "5000:5000"
    environment:
      - FLASK_DEBUG=False
      - PORT=5000
      - HOST=0.0.0.0
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=mesai
      - AI_SERVICE_URL=http://192.168.2.191:11434
      - AI_SERVICE_MODEL=llama3
      - AI_CHAT_MODEL=llama3
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:8080,http://192.168.2.191:3000
    volumes:
      - ./logs:/app/logs
    depends_on:
      - qdrant
      - ollama
    networks:
      - argenova_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Opsiyonel)
  nginx:
    image: nginx:alpine
    container_name: argenova_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - flask_api
    networks:
      - argenova_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  qdrant_data:
    driver: local
  ollama_data:
    driver: local

networks:
  argenova_network:
    driver: bridge
